# Generated by Django 4.2.23 on 2025-09-09 15:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('plant', '0040_alter_downtimeparticipation_event'),
    ]

    operations = [
        migrations.CreateModel(
            name='DowntimeCodeNEWTEST',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique downtime code, e.g. MECH-TOOL', max_length=20, unique=True, verbose_name='Code')),
                ('category', models.CharField(help_text='High‐level category, e.g. Mechanical / Equipment Failure', max_length=100, verbose_name='Category')),
                ('subcategory', models.CharField(help_text='Human‐readable subcategory, e.g. Tooling Failure', max_length=100, verbose_name='Subcategory')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this lookup row was last changed', verbose_name='Last Updated')),
            ],
            options={
                'verbose_name': 'Downtime Code',
                'verbose_name_plural': 'Downtime Codes',
                'ordering': ['category', 'subcategory', 'code'],
            },
        ),
        migrations.CreateModel(
            name='LinePriorityNEWTEST',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line', models.CharField(max_length=50, unique=True)),
                ('priority', models.PositiveIntegerField(default=0, help_text='Lower numbers are higher priority')),
            ],
            options={
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='MachineDowntimeEventNEWTEST',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line', models.CharField(max_length=50, verbose_name='Line')),
                ('machine', models.CharField(max_length=50, verbose_name='Machine')),
                ('category', models.TextField(verbose_name='Category')),
                ('subcategory', models.TextField(blank=True, default='', help_text='Optional sub-category', verbose_name='Subcategory')),
                ('code', models.CharField(blank=True, default='', help_text='Optional, same as subcategory if provided', max_length=20, verbose_name='Downtime Code')),
                ('start_epoch', models.BigIntegerField(verbose_name='Start (epoch)')),
                ('closeout_epoch', models.BigIntegerField(blank=True, null=True, verbose_name='Closeout (epoch)')),
                ('comment', models.TextField(verbose_name='Comment')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at_UTC', models.DateTimeField(auto_now_add=True)),
                ('updated_at_UTC', models.DateTimeField(auto_now=True)),
                ('labour_types', models.JSONField(blank=True, default=list, help_text='List of labour roles needed (one or more of OPERATOR,ELECTRICIAN,TECH,MILLWRIGHT)')),
                ('employee_id', models.TextField(blank=True, help_text='(optional) ID of the person who logged this downtime', null=True, verbose_name='Employee ID')),
                ('closeout_comment', models.TextField(blank=True, help_text='What the labourer did to fix the issue when closing out', null=True, verbose_name='Close-out Comment')),
            ],
        ),
        migrations.CreateModel(
            name='DowntimeMachineNEWTEST',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line', models.CharField(help_text='Production line this machine lives on', max_length=50, verbose_name='Line')),
                ('operation', models.CharField(help_text='Operation or process name', max_length=100, verbose_name='Operation')),
                ('machine_number', models.CharField(help_text='Unique number or code for the machine', max_length=50, verbose_name='Machine #')),
                ('is_tracked', models.BooleanField(default=True, help_text='Whether downtime is being recorded for this machine', verbose_name='Tracked?')),
                ('created_at_UTC', models.DateTimeField(auto_now_add=True, help_text='When this machine record was created (UTC)')),
                ('updated_at_UTC', models.DateTimeField(auto_now=True, help_text='When this machine record was last updated (UTC)')),
            ],
            options={
                'verbose_name': 'Downtime Machine',
                'verbose_name_plural': 'Downtime Machines',
                'ordering': ['line', 'operation', 'machine_number'],
                'unique_together': {('line', 'operation', 'machine_number')},
            },
        ),
        migrations.CreateModel(
            name='DowntimeParticipationNEWTEST',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('join_epoch', models.BigIntegerField()),
                ('leave_epoch', models.BigIntegerField(blank=True, null=True)),
                ('join_comment', models.TextField(blank=True, default='')),
                ('leave_comment', models.TextField(blank=True, null=True)),
                ('total_minutes', models.IntegerField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='plant.machinedowntimeeventnewtest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-join_epoch'],
                'unique_together': {('event', 'user', 'join_epoch')},
            },
        ),
    ]
