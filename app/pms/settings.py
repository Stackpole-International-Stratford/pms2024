"""
Django settings for pms project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
import ldap
from django_auth_ldap.config import LDAPSearch




# =================================================================================================
# =================================================================================================
# ================= At the top of the page will be a list of variables ============================
# ============= that you can and should configure to your own needs and addresses =================
# =================================================================================================
# =================================== Section 1 ===================================================
# =================================================================================================
# =================================================================================================

'''All of these variables in the settings.py are standard variables that can be found in the official django documentation. 
    Make sure to edit the allowed hosts, internal ips, database connections, timezones and ldap connections for users. 
    https://docs.djangoproject.com/en/5.2/
'''


ALLOWED_HOSTS = ['pmdsdata12', '10.4.1.234',
                '10.4.1.232', 'pmdsdata9', '0.0.0.0']
ALLOWED_HOSTS_ENV = os.environ.get('ALLOWED_HOSTS')
if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS.extend(ALLOWED_HOSTS_ENV.split(','))


INTERNAL_IPS = ['pmdsdata12', '10.4.1.234', '127.0.0.1',
                 'localhost', '10.4.1.232']





DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('DB_PMS_NAME', 'django_pms'),
        'USER': os.environ.get('DB_PMS_USER', 'muser'),
        'PASSWORD': os.environ.get('DB_PMS_PASSWORD', 'wsj.231.kql'),
        'HOST': os.environ.get('DB_PMS_HOST', '10.4.1.245'),
        'PORT': os.environ.get('DB_PMS_PORT', 6601),
    },
}



LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Toronto'



EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp01.stackpole.ca'
EMAIL_PORT = 25  # Default SMTP port
EMAIL_USE_TLS = False
EMAIL_USE_SSL = False
DEFAULT_FROM_EMAIL = 'noreply@johnsonelectric.com'



# Enable LDAP logging for debugging
AUTH_LDAP_DEBUG = True

# Change this to your ldap server uri, contact IT for this
AUTH_LDAP_SERVER_URI = "ldap://10.4.131.200"

# keep this line the same
AUTH_LDAP_USER_DN_TEMPLATE = "{user}@johnsonelectric.com"



AUTH_LDAP_USER_SEARCH = LDAPSearch(
    "DC=JEHLI,DC=INTERNAL",
    ldap.SCOPE_SUBTREE,
    "(sAMAccountName={user})"
)

# You won't neeed this unless your active directory is setup with more locked down permissions
AUTH_LDAP_BIND_DN = ""
AUTH_LDAP_BIND_PASSWORD = ""


# Custom LDAP configuration for the second server (used by the CustomLDAPBackend)
# Make sure to change the URI
LDAP_SERVERS = [
    {
        "URI": "ldap://10.4.131.200",
        "USER_DN_TEMPLATE": "{user}@johnsonelectric.com",
        "BASE_DN": "DC=JEHLI,DC=INTERNAL",
    },
]


# These backends are helpful for doing things like preloading users with permissions before they've signed in.
# Authentication Backends
AUTHENTICATION_BACKENDS = [
    'django_auth_ldap.backend.LDAPBackend',  # Primary LDAP Backend
    'pms.backends.CustomLDAPBackend',  # Secondary Custom LDAP Backend
    'django.contrib.auth.backends.ModelBackend',  # Default database authentication
]








# =================================================================================================
# =================================================================================================
# ================= Here there are variables that don't need to be changed ========================
# =================================== Section 2 ===================================================
# =================================================================================================
# =================================================================================================


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = os.environ.get('SECRET_KEY', 'changeme')
DEBUG = True

# You won't need to touch this list unless you plan on expanding the codebase with new apps of your own
INSTALLED_APPS = [
    'whitenoise.runserver_nostatic',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'debug_toolbar',
    'django_bootstrap5',
    'widget_tweaks',
    'corsheaders',
    'forms',
]


# You don't need to worry about this middleware list either unless you want to add middleware of your own in the future
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    # 'pms.middleware.timezone.TimezoneMiddleware',
]
if DEBUG:
    MIDDLEWARE.remove('whitenoise.middleware.WhiteNoiseMiddleware')


ROOT_URLCONF = 'pms.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'pms/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pms.wsgi.application'






AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]




USE_I18N = True

USE_TZ = True




# Boostrap5 css settings
# Again you don't have to worry about this because the js and cs .min files are in the common_static already and get collected during docker deployment
BOOTSTRAP5 = {

    # The complete URL to the Bootstrap CSS file.
    # Note that a URL can be either a string
    # ("https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css"),
    # or a dict with keys `url`, `integrity` and `crossorigin` like the default value below.
    "css_url": "http://pmdsdata12/static/static/bootstrap/css/bootstrap.min.css",

    # The complete URL to the Bootstrap bundle JavaScript file.
    "javascript_url": "http://pmdsdata12/static/static/bootstrap/js/bootstrap.bundle.min.js",

    # The complete URL to the Bootstrap CSS theme file (None means no theme).
    "theme_url": None,

    # Put JavaScript in the HEAD section of the HTML document (only relevant if you use bootstrap5.html).
    'javascript_in_head': False,

    # Wrapper class for non-inline fields.
    # The default value "mb-3" is the spacing as used by Bootstrap 5 example code.
    'wrapper_class': 'mb-3',

    # Wrapper class for inline fields.
    # The default value is empty, as Bootstrap5 example code doesn't use a wrapper class.
    'inline_wrapper_class': '',

    # Label class to use in horizontal forms.
    'horizontal_label_class': 'col-sm-2',

    # Field class to use in horizontal forms.
    'horizontal_field_class': 'col-sm-10',

    # Field class used for horizontal fields withut a label.
    'horizontal_field_offset_class': 'offset-sm-2',

    # Set placeholder attributes to label if no placeholder is provided.
    'set_placeholder': True,

    # Class to indicate required field (better to set this in your Django form).
    'required_css_class': '',

    # Class to indicate field has one or more errors (better to set this in your Django form).
    'error_css_class': '',

    # Class to indicate success, meaning the field has valid input (better to set this in your Django form).
    'success_css_class': '',

    # Enable or disable Bootstrap 5 server side validation classes (separate from the indicator classes above).
    'server_side_validation': True,

    # Renderers (only set these if you have studied the source and understand the inner workings).
    'formset_renderers':{
        'default': 'django_bootstrap5.renderers.FormsetRenderer',
    },
    'form_renderers': {
        'default': 'django_bootstrap5.renderers.FormRenderer',
    },
    'field_renderers': {
        'default': 'django_bootstrap5.renderers.FieldRenderer',
    },
}

# These paths are required but minimally used for this application and don't need any immediate edits. 
STATIC_URL = '/static/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media_files')

STATIC_ROOT = BASE_DIR / 'static_files'

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'common_static'),
]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_ALL_ORIGINS = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'file': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.request': {
            'level': 'INFO',
            'handlers': ['console',]
        },
        'prod-query': {
            'level': 'INFO',
            'handlers': ['console',],
        }

    }
}

