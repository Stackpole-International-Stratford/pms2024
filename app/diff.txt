diff --git a/app/forms/__init__.py b/app/forms/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/app/forms/admin.py b/app/forms/admin.py
new file mode 100644
index 0000000..8c38f3f
--- /dev/null
+++ b/app/forms/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/app/forms/app_info.py b/app/forms/app_info.py
new file mode 100644
index 0000000..3f969e9
--- /dev/null
+++ b/app/forms/app_info.py
@@ -0,0 +1,6 @@
+def get_app_info():
+    return {
+        'name': 'Forms',
+        'description': 'Forms finder and management',
+        'url': '/forms'
+    }
diff --git a/app/forms/apps.py b/app/forms/apps.py
new file mode 100644
index 0000000..086edd3
--- /dev/null
+++ b/app/forms/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class FormsConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'forms'
diff --git a/app/forms/forms.py b/app/forms/forms.py
new file mode 100644
index 0000000..b3a53b9
--- /dev/null
+++ b/app/forms/forms.py
@@ -0,0 +1,389 @@
+from django import forms
+from .models import Form, FormQuestion, FormType
+
+# OIS Form
+class OISForm(forms.ModelForm):
+    part_number = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+    operation = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+    part_name = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+    year = forms.CharField(max_length=4, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+    mod_level = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+    machine = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+    mod_date = forms.DateField(required=True, widget=forms.DateInput(attrs={'class': 'form-control', 'type': 'date'}))
+
+    class Meta:
+        model = Form
+        fields = ['name']
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        if self.instance and self.instance.metadata:
+            # Prepopulate fields from the metadata JSON
+            self.fields['part_number'].initial = self.instance.metadata.get('part_number', '')
+            self.fields['operation'].initial = self.instance.metadata.get('operation', '')
+            self.fields['part_name'].initial = self.instance.metadata.get('part_name', '')
+            self.fields['year'].initial = self.instance.metadata.get('year', '')
+            self.fields['mod_level'].initial = self.instance.metadata.get('mod_level', '')
+            self.fields['machine'].initial = self.instance.metadata.get('machine', '')
+            self.fields['mod_date'].initial = self.instance.metadata.get('mod_date', '')
+
+    def save(self, commit=True):
+        form_instance = super().save(commit=False)
+        form_instance.form_type = FormType.objects.get(name="OIS")
+        form_instance.metadata = {
+            'part_number': self.cleaned_data['part_number'],
+            'operation': self.cleaned_data['operation'],
+            'part_name': self.cleaned_data['part_name'],
+            'year': self.cleaned_data['year'],
+            'mod_level': self.cleaned_data['mod_level'],
+            'machine': self.cleaned_data['machine'],
+            'mod_date': self.cleaned_data['mod_date'].isoformat()
+        }
+        if commit:
+            form_instance.save()
+        return form_instance
+
+
+
+
+
+
+# OIS Question form
+class OISQuestionForm(forms.ModelForm):
+    feature = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+    special_characteristic = forms.CharField(max_length=255, required=False, widget=forms.TextInput(attrs={'class': 'form-control'}))
+    characteristic = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+    specifications = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+    sample_frequency = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+    sample_size = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+    done_by = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+    order = forms.IntegerField(widget=forms.HiddenInput(), required=False)  # Hidden order field
+    checkmark = forms.BooleanField(required=False, widget=forms.CheckboxInput(attrs={'class': 'form-check-input'}))  # New Checkmark field
+
+    class Meta:
+        model = FormQuestion
+        fields = ['feature', 'special_characteristic', 'characteristic', 'specifications', 'sample_frequency', 'sample_size', 'done_by', 'order', 'checkmark']  # Include checkmark in fields
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        if self.instance and self.instance.question:
+            # Prepopulate fields from the question JSON
+            self.fields['feature'].initial = self.instance.question.get('feature', '')
+            self.fields['special_characteristic'].initial = self.instance.question.get('special_characteristic', '')
+            self.fields['characteristic'].initial = self.instance.question.get('characteristic', '')
+            self.fields['specifications'].initial = self.instance.question.get('specifications', '')
+            self.fields['sample_frequency'].initial = self.instance.question.get('sample_frequency', '')
+            self.fields['sample_size'].initial = self.instance.question.get('sample_size', '')
+            self.fields['done_by'].initial = self.instance.question.get('done_by', '')
+            self.fields['order'].initial = self.instance.question.get('order', 1)  # Get 'order' from JSON
+            self.fields['checkmark'].initial = self.instance.question.get('checkmark', False)  # Get 'checkmark' from JSON, default to False
+
+    def save(self, form_instance=None, order=None, commit=True):
+        question_instance = super().save(commit=False)
+        if form_instance:
+            question_instance.form = form_instance
+        # Build the question data
+        question_data = {
+            'feature': self.cleaned_data['feature'],
+            'special_characteristic': self.cleaned_data['special_characteristic'],
+            'characteristic': self.cleaned_data['characteristic'],
+            'specifications': self.cleaned_data['specifications'],
+            'sample_frequency': self.cleaned_data['sample_frequency'],
+            'sample_size': self.cleaned_data['sample_size'],
+            'done_by': self.cleaned_data['done_by'],
+            'order': order if order is not None else self.cleaned_data.get('order', 1),
+            'checkmark': self.cleaned_data['checkmark'],  # Add checkmark to the question data
+        }
+        question_instance.question = question_data
+        if commit:
+            question_instance.save()
+        return question_instance
+
+
+
+# TPM Form
+class TPMForm(forms.ModelForm):
+    part_number = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+    operation = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+
+    class Meta:
+        model = Form
+        fields = ['name']  # Assuming 'name' is a standard field for all forms
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        if self.instance and self.instance.metadata:
+            # Prepopulate fields from the metadata JSON
+            self.fields['part_number'].initial = self.instance.metadata.get('part_number', '')
+            self.fields['operation'].initial = self.instance.metadata.get('operation', '')
+
+    def save(self, commit=True):
+        form_instance = super().save(commit=False)
+        form_instance.form_type = FormType.objects.get(name="TPM")  # Assuming FormType for TPM exists
+        form_instance.metadata = {
+            'part_number': self.cleaned_data['part_number'],
+            'operation': self.cleaned_data['operation'],
+        }
+        if commit:
+            form_instance.save()
+        return form_instance
+
+
+# Updated TPM Question Form with order field
+class TPMQuestionForm(forms.ModelForm):
+    question_text = forms.CharField(
+        max_length=255,
+        required=True,
+        widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter a question'})
+    )
+    order = forms.IntegerField(
+        widget=forms.HiddenInput(), 
+        required=False, 
+        initial=1  # Default value for order if not provided
+    )
+
+    class Meta:
+        model = FormQuestion
+        fields = ['question_text', 'order']  # Include order field
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        if self.instance and self.instance.question:
+            # Prepopulate the field from the question JSON
+            self.fields['question_text'].initial = self.instance.question.get('question_text', '')
+            self.fields['order'].initial = self.instance.question.get('order', 1)  # Get 'order' from JSON, default to 1
+
+    def save(self, form_instance=None, order=None, commit=True):
+        question_instance = super().save(commit=False)
+        if form_instance:
+            question_instance.form = form_instance
+        # Build the question data
+        question_data = {
+            'question_text': self.cleaned_data['question_text'],
+            'order': order if order is not None else self.cleaned_data.get('order', 1),  # Use provided order or fallback to field value
+        }
+        question_instance.question = question_data
+        if commit:
+            question_instance.save()
+        return question_instance
+
+
+# LPA Form
+class LPAForm(forms.ModelForm):
+    part_number = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+    operation = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
+
+    class Meta:
+        model = Form
+        fields = ['name']  # Assuming 'name' is a standard field for all forms
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        if self.instance and self.instance.metadata:
+            # Prepopulate fields from the metadata JSON
+            self.fields['part_number'].initial = self.instance.metadata.get('part_number', '')
+            self.fields['operation'].initial = self.instance.metadata.get('operation', '')
+
+    def save(self, commit=True):
+        form_instance = super().save(commit=False)
+        form_instance.form_type = FormType.objects.get(name="LPA")  # Assuming FormType for LPA exists
+        form_instance.metadata = {
+            'part_number': self.cleaned_data['part_number'],
+            'operation': self.cleaned_data['operation'],
+        }
+        if commit:
+            form_instance.save()
+        return form_instance
+
+
+class LPAQuestionForm(forms.ModelForm):
+    question_text = forms.CharField(
+        max_length=255,
+        required=True,
+        widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter a question'})
+    )
+    what_to_look_for = forms.CharField(
+        max_length=255,
+        required=False,  # Optional
+        widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter what to look for (optional)'})
+    )
+    recommended_action = forms.CharField(
+        max_length=255,
+        required=False,  # Optional
+        widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter recommended action (optional)'})
+    )
+    typed_answer = forms.BooleanField(
+        required=False,
+        widget=forms.CheckboxInput(attrs={'class': 'form-check-input'})
+    )
+    order = forms.IntegerField(
+        widget=forms.HiddenInput(),
+        required=False,
+        initial=1  # Default value for order if not provided
+    )
+
+    class Meta:
+        model = FormQuestion
+        fields = ['question_text', 'what_to_look_for', 'recommended_action', 'typed_answer', 'order']
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        if self.instance and self.instance.question:
+            # Prepopulate the fields from the question JSON
+            self.fields['question_text'].initial = self.instance.question.get('question_text', '')
+            self.fields['what_to_look_for'].initial = self.instance.question.get('what_to_look_for', '')
+            self.fields['recommended_action'].initial = self.instance.question.get('recommended_action', '')
+            self.fields['typed_answer'].initial = self.instance.question.get('typed_answer', False)  # Prepopulate the checkbox
+            self.fields['order'].initial = self.instance.question.get('order', 1)
+
+    def save(self, form_instance=None, order=None, commit=True):
+        question_instance = super().save(commit=False)
+        if form_instance:
+            question_instance.form = form_instance
+        # Build the question data
+        question_data = {
+            'question_text': self.cleaned_data['question_text'],
+            'what_to_look_for': self.cleaned_data.get('what_to_look_for', ''),
+            'recommended_action': self.cleaned_data.get('recommended_action', ''),
+            'typed_answer': self.cleaned_data.get('typed_answer', False),  # Add the checkbox value to the JSON
+            'order': order if order is not None else self.cleaned_data.get('order', 1),
+        }
+        question_instance.question = question_data
+        if commit:
+            question_instance.save()
+        return question_instance
+
+
+
+
+# Dictionary for dynamically mapping form types to form classes
+FORM_TYPE_FORMS = {
+    'OIS': OISForm,
+    'TPM': TPMForm,  # Added TPM form
+    'LPA': LPAForm,
+}
+
+# Dictionary for dynamically mapping form types to question form classes
+QUESTION_FORM_CLASSES = {
+    'OIS': OISQuestionForm,
+    'TPM': TPMQuestionForm,  # Added TPM question form
+    'LPA': LPAQuestionForm,
+}
+
+
+
+
+
+
+
+
+
+
+from django.core.exceptions import ValidationError
+from django import forms
+from .models import FormAnswer
+
+class OISAnswerForm(forms.ModelForm):
+    class Meta:
+        model = FormAnswer
+        fields = ['answer']
+
+    def __init__(self, *args, question=None, **kwargs):
+        """Adjust the answer field based on whether the question requires a checkmark."""
+        super().__init__(*args, **kwargs)
+        if question and question.question.get('checkmark', False):  # Use dropdown for checkmark questions
+            self.fields['answer'] = forms.ChoiceField(
+                choices=[('', 'Select...'), ('Pass', 'Pass'), ('Fail', 'Fail')],
+                widget=forms.Select(attrs={'class': 'form-select'})  # Use Bootstrap's form-select for styling
+            )
+        else:
+            # Default to a text input for non-checkmark questions
+            self.fields['answer'] = forms.CharField(
+                max_length=255,
+                required=True,
+                widget=forms.TextInput(attrs={
+                    'class': 'form-control input-box',
+                    'style': 'width: 100px;',
+                    'placeholder': 'Answer'
+                })
+            )
+
+
+class LPAAnswerForm(forms.ModelForm):
+    """
+    Form for capturing Yes/No answers for LPA questions,
+    with fields for 'Issue', 'Action Taken', and an additional char input field.
+    """
+    issue = forms.CharField(
+        required=False,
+        widget=forms.Textarea(attrs={
+            'class': 'form-control',
+            'placeholder': 'Describe the issue',
+            'rows': 3
+        })
+    )
+    action_taken = forms.CharField(
+        required=False,
+        widget=forms.Textarea(attrs={
+            'class': 'form-control',
+            'placeholder': 'Describe the action taken',
+            'rows': 3
+        })
+    )
+    additional_input = forms.CharField(
+        required=False,
+        widget=forms.TextInput(attrs={
+            'class': 'form-control',
+            'placeholder': 'Answer Here'
+        })
+    )
+
+    class Meta:
+        model = FormAnswer
+        fields = ['answer']  # We'll dynamically store everything in 'answer'
+
+    def __init__(self, *args, question=None, **kwargs):
+        super().__init__(*args, **kwargs)
+
+        # Dropdown for 'answer'
+        self.fields['answer'] = forms.ChoiceField(
+            choices=[('', 'Select...'), ('Yes', 'Yes'), ('No', 'No')],
+            widget=forms.Select(attrs={'class': 'form-select'}),
+            label=question.question.get('question_text', 'Answer') if question else 'Answer',
+            required=False
+        )
+
+    def clean(self):
+        """
+        Validate the form and ensure that at least one of 'answer' or 'additional_input' is provided.
+        """
+        cleaned_data = super().clean()
+        answer = cleaned_data.get('answer')
+        issue = cleaned_data.get('issue')
+        action_taken = cleaned_data.get('action_taken')
+        additional_input = cleaned_data.get('additional_input')
+
+        if not answer and not additional_input:
+            raise forms.ValidationError("You must provide either an answer (Yes/No) or additional input.")
+
+        if answer == 'No':
+            if not issue:
+                self.add_error('issue', "This field is required when 'No' is selected.")
+            if not action_taken:
+                self.add_error('action_taken', "This field is required when 'No' is selected.")
+
+        # Construct the cleaned answer as a JSON-like dictionary
+        cleaned_data['answer'] = {}
+        if answer:
+            cleaned_data['answer']['answer'] = answer
+        if answer == 'No' and issue and action_taken:
+            cleaned_data['answer'].update({
+                'issue': issue,
+                'action_taken': action_taken,
+            })
+        if additional_input:
+            cleaned_data['answer']['answer'] = additional_input
+
+        return cleaned_data
+
+
diff --git a/app/forms/migrations/0001_initial.py b/app/forms/migrations/0001_initial.py
new file mode 100644
index 0000000..62365b3
--- /dev/null
+++ b/app/forms/migrations/0001_initial.py
@@ -0,0 +1,32 @@
+# Generated by Django 4.2.13 on 2024-08-22 14:42
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='FormType',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=255)),
+                ('template_name', models.CharField(max_length=255)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='FormSubmission',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('payload', models.JSONField()),
+                ('created_at', models.DateTimeField(auto_now_add=True)),
+                ('form_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='forms.formtype')),
+            ],
+        ),
+    ]
diff --git a/app/forms/migrations/0002_form_formquestionanswer.py b/app/forms/migrations/0002_form_formquestionanswer.py
new file mode 100644
index 0000000..9baae1b
--- /dev/null
+++ b/app/forms/migrations/0002_form_formquestionanswer.py
@@ -0,0 +1,32 @@
+# Generated by Django 4.2.13 on 2024-08-23 15:33
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('forms', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Form',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=255)),
+                ('created_at', models.DateTimeField(auto_now_add=True)),
+                ('form_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='forms.formtype')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='FormQuestionAnswer',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('question', models.CharField(max_length=255)),
+                ('answer', models.TextField(blank=True, null=True)),
+                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions_answers', to='forms.form')),
+            ],
+        ),
+    ]
diff --git a/app/forms/migrations/0003_remove_formquestionanswer_answer_and_more.py b/app/forms/migrations/0003_remove_formquestionanswer_answer_and_more.py
new file mode 100644
index 0000000..8db6c02
--- /dev/null
+++ b/app/forms/migrations/0003_remove_formquestionanswer_answer_and_more.py
@@ -0,0 +1,27 @@
+# Generated by Django 4.2.13 on 2024-08-23 16:39
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('forms', '0002_form_formquestionanswer'),
+    ]
+
+    operations = [
+        migrations.RemoveField(
+            model_name='formquestionanswer',
+            name='answer',
+        ),
+        migrations.AddField(
+            model_name='formquestionanswer',
+            name='answer_type',
+            field=models.CharField(choices=[('textarea', 'Textarea'), ('number', 'Number Input'), ('dropdown', 'Dropdown'), ('radio', 'Radio Button'), ('checkbox', 'Checkbox'), ('time', 'Time Input')], default='textarea', max_length=50),
+        ),
+        migrations.AddField(
+            model_name='formquestionanswer',
+            name='options',
+            field=models.JSONField(blank=True, null=True),
+        ),
+    ]
diff --git a/app/forms/migrations/0004_formanswer_formquestion_delete_formquestionanswer_and_more.py b/app/forms/migrations/0004_formanswer_formquestion_delete_formquestionanswer_and_more.py
new file mode 100644
index 0000000..6328216
--- /dev/null
+++ b/app/forms/migrations/0004_formanswer_formquestion_delete_formquestionanswer_and_more.py
@@ -0,0 +1,39 @@
+# Generated by Django 4.2.13 on 2024-10-04 17:48
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('forms', '0003_remove_formquestionanswer_answer_and_more'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='FormAnswer',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('answer', models.TextField()),
+                ('created_at', models.DateTimeField(auto_now_add=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='FormQuestion',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('question', models.JSONField()),
+                ('created_at', models.DateTimeField(auto_now_add=True)),
+                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='forms.form')),
+            ],
+        ),
+        migrations.DeleteModel(
+            name='FormQuestionAnswer',
+        ),
+        migrations.AddField(
+            model_name='formanswer',
+            name='question',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='forms.formquestion'),
+        ),
+    ]
diff --git a/app/forms/migrations/0005_alter_formanswer_answer.py b/app/forms/migrations/0005_alter_formanswer_answer.py
new file mode 100644
index 0000000..02c4418
--- /dev/null
+++ b/app/forms/migrations/0005_alter_formanswer_answer.py
@@ -0,0 +1,18 @@
+# Generated by Django 4.2.13 on 2024-10-04 18:41
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('forms', '0004_formanswer_formquestion_delete_formquestionanswer_and_more'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='formanswer',
+            name='answer',
+            field=models.JSONField(),
+        ),
+    ]
diff --git a/app/forms/migrations/0006_form_metadata.py b/app/forms/migrations/0006_form_metadata.py
new file mode 100644
index 0000000..e19e34d
--- /dev/null
+++ b/app/forms/migrations/0006_form_metadata.py
@@ -0,0 +1,18 @@
+# Generated by Django 4.2.13 on 2024-10-08 12:11
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('forms', '0005_alter_formanswer_answer'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='form',
+            name='metadata',
+            field=models.JSONField(blank=True, default=dict),
+        ),
+    ]
diff --git a/app/forms/migrations/0007_formanswer_operator_number.py b/app/forms/migrations/0007_formanswer_operator_number.py
new file mode 100644
index 0000000..4d8308c
--- /dev/null
+++ b/app/forms/migrations/0007_formanswer_operator_number.py
@@ -0,0 +1,20 @@
+# Generated by Django 4.2.15 on 2024-11-07 19:24
+
+from django.db import migrations, models
+import django.utils.timezone
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('forms', '0006_form_metadata'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='formanswer',
+            name='operator_number',
+            field=models.CharField(default=django.utils.timezone.now, max_length=255),
+            preserve_default=False,
+        ),
+    ]
diff --git a/app/forms/migrations/0008_form_slug.py b/app/forms/migrations/0008_form_slug.py
new file mode 100644
index 0000000..b1d2978
--- /dev/null
+++ b/app/forms/migrations/0008_form_slug.py
@@ -0,0 +1,11 @@
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+    dependencies = [
+        ('forms', '0007_formanswer_operator_number'),  # Adjust based on your last migration
+    ]
+
+    operations = [
+        # No operations, as we are skipping the addition of the slug field
+    ]
diff --git a/app/forms/migrations/__init__.py b/app/forms/migrations/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/app/forms/models.py b/app/forms/models.py
new file mode 100644
index 0000000..a9b66e9
--- /dev/null
+++ b/app/forms/models.py
@@ -0,0 +1,47 @@
+from django.db import models
+
+class FormSubmission(models.Model):
+    payload = models.JSONField()
+    created_at = models.DateTimeField(auto_now_add=True)
+    form_type = models.ForeignKey('FormType', on_delete=models.CASCADE)
+
+    def __str__(self):
+        return f"Submission {self.id} - {self.form_type.name}"
+
+
+class FormType(models.Model):
+    name = models.CharField(max_length=255)
+    template_name = models.CharField(max_length=255)
+
+    def __str__(self):
+        return self.name
+
+
+class Form(models.Model):
+    name = models.CharField(max_length=255)
+    form_type = models.ForeignKey(FormType, on_delete=models.CASCADE)
+    created_at = models.DateTimeField(auto_now_add=True)
+    metadata = models.JSONField(default=dict, blank=True)  # Add the metadata field
+
+
+    def __str__(self):
+        return f"Form {self.name} - {self.form_type.name}"
+
+
+class FormQuestion(models.Model):
+    form = models.ForeignKey(Form, on_delete=models.CASCADE, related_name='questions')
+    question = models.JSONField()  # Store the question details as a JSON object
+    created_at = models.DateTimeField(auto_now_add=True)
+
+    def __str__(self):
+        return f"Question for Form: {self.form.name}"
+
+
+class FormAnswer(models.Model):
+    question = models.ForeignKey(FormQuestion, on_delete=models.CASCADE, related_name='answers')
+    answer = models.JSONField()  # Storing the answer as a JSON object for flexibility
+    operator_number = models.CharField(max_length=255)  # New field to store operator number
+    created_at = models.DateTimeField(auto_now_add=True)
+
+    def __str__(self):
+        return f"Answer by {self.operator_number} for Question ID: {self.question.id} - Form: {self.question.form.name}"
diff --git a/app/forms/templates/forms/bulk_question_create.html b/app/forms/templates/forms/bulk_question_create.html
new file mode 100644
index 0000000..bfe8bed
--- /dev/null
+++ b/app/forms/templates/forms/bulk_question_create.html
@@ -0,0 +1,107 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Bulk Form and Question Create</title>
+    <style>
+        body {
+            font-family: Arial, sans-serif;
+            margin: 20px;
+            background-color: #f4f4f9;
+        }
+        h2 {
+            color: #333;
+        }
+        label {
+            display: block;
+            margin-bottom: 5px;
+            font-weight: bold;
+        }
+        textarea, input[type="text"] {
+            width: 100%;
+            padding: 10px;
+            margin-bottom: 15px;
+            border: 1px solid #ccc;
+            border-radius: 4px;
+            font-size: 16px;
+        }
+        input[type="checkbox"] {
+            margin-right: 10px;
+        }
+        input[type="submit"] {
+            background-color: #4CAF50;
+            color: white;
+            padding: 10px 20px;
+            border: none;
+            border-radius: 4px;
+            cursor: pointer;
+            font-size: 16px;
+        }
+        input[type="submit"]:hover {
+            background-color: #45a049;
+        }
+        p.error {
+            color: red;
+        }
+    </style>
+</head>
+<body>
+
+    <h2>Bulk Form and Question Create</h2>
+
+    <!-- Display error if present -->
+    {% if error %}
+    <p class="error">{{ error }}</p>
+    {% endif %}
+
+    <form method="post">
+        {% csrf_token %}
+
+        <!-- Data JSON textarea for form and questions -->
+        <label for="data_json">Form and Questions JSON:</label>
+        <textarea name="data_json" id="data_json" rows="20" placeholder='{
+    "form": {
+        "name": "Sample Form",
+        "part_number": "PN123",
+        "operation": "Op456",
+        "part_name": "Sample Part",
+        "year": "2023",
+        "mod_level": "A1",
+        "machine": "Machine XYZ",
+        "mod_date": "2023-11-11"
+    },
+    "questions": [
+        {
+            "feature": "67",
+            "special_characteristic": "Bu",
+            "characteristic": "Hub OD (Air Gauge)",
+            "specifications": "Ø30.187 - Ø30.213 mm",
+            "sample_frequency": "100%",
+            "sample_size": "100%",
+            "done_by": "OP/QA",
+            "checkmark": true
+        },
+        {
+            "feature": "HP",
+            "special_characteristic": "D",
+            "characteristic": "Hole(s) Presence (Visual/Gauge)",
+            "specifications": "Present YES / NO",
+            "sample_frequency": "100%",
+            "sample_size": "100%",
+            "done_by": "OP / QA",
+            "checkmark": false
+        }
+    ]
+}'>{{ data_json }}</textarea>
+
+        <!-- Checkbox to delete existing questions -->
+        <input type="checkbox" name="delete_existing" id="delete_existing">
+        <label for="delete_existing">Delete existing questions for this form</label><br><br>
+
+        <!-- Submit button -->
+        <input type="submit" value="Submit">
+    </form>
+
+</body>
+</html>
diff --git a/app/forms/templates/forms/find_forms.html b/app/forms/templates/forms/find_forms.html
new file mode 100644
index 0000000..78f14d4
--- /dev/null
+++ b/app/forms/templates/forms/find_forms.html
@@ -0,0 +1,176 @@
+{% load static %}
+<!doctype html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1">
+    <link href="{% static 'bootstrap/css/bootstrap.min.css' %}" rel="stylesheet">
+    <title>Forms for {{ form_type.name }}</title>
+</head>
+<body>
+
+    <!-- Navbar -->
+    <nav class="navbar navbar-expand-lg navbar-light bg-light">
+        <a class="navbar-brand" href="{% url 'forms_index' %}">
+            <button type="button" class="btn btn-outline-dark mx-3">Back</button>
+        </a>
+    </nav>
+
+    <div class="container mt-5">
+        <!-- Logo centered above the title -->
+        <div class="text-center mb-3">
+            <img src="{% static 'images/JE_Logo_PNG.png' %}" alt="JE Logo" style="height: 50px;">
+        </div>
+        
+        <h1>Forms for {{ form_type.name }}</h1>
+        <hr>
+
+        <!-- Dynamic Sticky Filters -->
+        <div class="row mb-3">
+            {% for key in metadata_keys %}
+            <div class="col-md-4">
+                <label for="{{ key }}Filter" class="form-label">{{ key|capfirst }}</label>
+                <select id="{{ key }}Filter" class="form-select">
+                    <option value="">All {{ key|capfirst }}</option>
+                </select>
+            </div>
+            {% endfor %}
+        </div>
+
+        <!-- Create a new form button placed below the filters -->
+        <a href="{% url 'form_create' %}?form_type={{ form_type.id }}" class="btn btn-dark mb-3">Create a new form for {{ form_type.name }}</a>
+
+        <!-- Forms Table -->
+        {% if forms %}
+        <table class="table table-striped" id="formsTable">
+            <thead>
+                <tr>
+                    <th scope="col">Form Name</th>
+                    <th scope="col">Creation Date</th>
+                    <th scope="col">Metadata</th>
+                    <th scope="col">Actions</th>
+                </tr>
+            </thead>
+            <tbody>
+                {% for form in forms %}
+                <tr class="form-row" 
+                    {% for key, value in form.metadata.items %}
+                    data-{{ key }}="{{ value }}"
+                    {% endfor %}>
+                    <td class="form-name">{{ form.name }}</td>
+                    <td>{{ form.created_at|date:"Y-m-d H:i" }}</td>
+                    <td>
+                        <ul class="form-metadata">
+                            {% for key, value in form.metadata.items %}
+                            <li><strong>{{ key }}:</strong> {{ value }}</li>
+                            {% endfor %}
+                        </ul>
+                    </td>
+                    <td>
+                        <a href="{% url 'form_edit' form.id %}" class="btn btn-warning">Manage Form</a>
+                        <!-- <a href="{% url 'form_questions' form.id %}" class="btn btn-dark ml-2">Go to Form</a> -->
+                        <a href="{% url 'smart_form' form.id %}" class="btn btn-dark ml-2">Go to Form</a>
+                    </td>
+                </tr>
+                {% endfor %}
+            </tbody>
+        </table>
+        {% else %}
+        <p>No forms available for this type.</p>
+        {% endif %}
+    </div>
+
+    <script src="{% static 'bootstrap/js/bootstrap.bundle.min.js' %}"></script>
+    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
+
+    <script>
+        $(document).ready(function () {
+            // Helper functions for setting and getting cookies
+            function setCookie(name, value, days) {
+                const d = new Date();
+                d.setTime(d.getTime() + (days * 24 * 60 * 60 * 1000));
+                let expires = "expires=" + d.toUTCString();
+                document.cookie = name + "=" + value + ";" + expires + ";path=/";
+            }
+    
+            function getCookie(name) {
+                let cname = name + "=";
+                let decodedCookie = decodeURIComponent(document.cookie);
+                let ca = decodedCookie.split(';');
+                for(let i = 0; i < ca.length; i++) {
+                    let c = ca[i];
+                    while (c.charAt(0) == ' ') {
+                        c = c.substring(1);
+                    }
+                    if (c.indexOf(cname) == 0) {
+                        return c.substring(cname.length, c.length);
+                    }
+                }
+                return "";
+            }
+    
+            // Initialize a map to store unique values for each filter
+            let filterValues = {};
+    
+            // Populate filterValues with unique metadata values from each form row
+            $('#formsTable tbody tr').each(function () {
+                {% for key in metadata_keys %}
+                let {{ key }}Value = $(this).data('{{ key }}');
+                if ({{ key }}Value) {
+                    // Initialize set for each key if not done already
+                    filterValues['{{ key }}'] = filterValues['{{ key }}'] || new Set();
+                    filterValues['{{ key }}'].add({{ key }}Value);
+                }
+                {% endfor %}
+            });
+    
+            // Populate each filter dropdown with unique values and restore selected values from cookies
+            {% for key in metadata_keys %}
+            if (filterValues['{{ key }}']) {
+                filterValues['{{ key }}'].forEach(value => {
+                    $('#{{ key }}Filter').append(`<option value="${value}">${value}</option>`);
+                });
+            }
+    
+            // Retrieve and set saved filter value from cookie, if it exists
+            const saved{{ key|capfirst }} = getCookie('{{ key }}Filter');
+            if (saved{{ key|capfirst }}) {
+                $('#{{ key }}Filter').val(saved{{ key|capfirst }});
+            }
+            {% endfor %}
+    
+            // Filtering function based on dropdown selections
+            function filterForms() {
+                $('#formsTable tbody tr').each(function () {
+                    var matchesFilters = true;
+
+                    {% for key in metadata_keys %}
+                    // Get selected value for this filter
+                    var selected{{ key|capfirst }} = $('#{{ key }}Filter').val().toLowerCase();
+                    // Get data attribute value for this form row
+                    var form{{ key|capfirst }} = $(this).data('{{ key }}') ? $(this).data('{{ key }}').toString().toLowerCase() : "";
+
+                    if (selected{{ key|capfirst }} && form{{ key|capfirst }} !== selected{{ key|capfirst }}) {
+                        matchesFilters = false;
+                    }
+                    {% endfor %}
+
+                    // Show or hide row based on filter matching
+                    $(this).toggle(matchesFilters);
+                });
+            }
+    
+            // Save the selected filter value as a cookie on change
+            {% for key in metadata_keys %}
+            $('#{{ key }}Filter').on('change', function () {
+                setCookie('{{ key }}Filter', $(this).val(), 7);  // Save each filter selection for 7 days
+                filterForms();
+            });
+            {% endfor %}
+    
+            // Trigger filtering on page load to apply saved filters
+            filterForms();
+        });
+    </script>
+</body>
+</html>
diff --git a/app/forms/templates/forms/form_create.html b/app/forms/templates/forms/form_create.html
new file mode 100644
index 0000000..d331d8c
--- /dev/null
+++ b/app/forms/templates/forms/form_create.html
@@ -0,0 +1,315 @@
+{% load static %}
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <!-- Meta Tags and Title -->
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Create a New {{ form_type.name }} Form</title>
+
+    <!-- Bootstrap Integration -->
+    <link href="{% static 'bootstrap/css/bootstrap.min.css' %}" rel="stylesheet">
+    <script src="{% static 'bootstrap/js/bootstrap.bundle.min.js' %}"></script>
+
+    <!-- Custom CSS -->
+    <style>
+        .question-form {
+            background-color: #f8f9fa;
+            position: relative;
+        }
+        .question-header {
+            display: flex;
+            align-items: center;
+            justify-content: space-between;
+        }
+        .question-header .question-number {
+            margin-right: 15px;
+        }
+        .move-buttons {
+            display: flex;
+            align-items: center;
+        }
+        .move-buttons button {
+            margin-right: 5px;
+        }
+        .text-end {
+            margin-top: 10px;
+        }
+    </style>
+</head>
+<body>
+    <!-- Navigation Bar -->
+    <nav class="navbar navbar-expand-lg navbar-light bg-light">
+        <div class="container-fluid">
+            <a class="navbar-brand" href="{% url 'find_forms' %}">
+                <button type="button" class="btn btn-outline-dark">Back</button>
+            </a>
+            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" 
+                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
+                <span class="navbar-toggler-icon"></span>
+            </button>
+            <div class="collapse navbar-collapse" id="navbarNav"></div>
+        </div>
+    </nav>
+
+    <!-- Main Content -->
+    <div class="container mt-5">
+        <!-- Page Heading -->
+        <div class="text-center mb-5">
+            <h1 class="display-4">Create a New {{ form_type.name }} Form</h1>
+            <p class="lead">Design your form and add questions below</p>
+        </div>
+
+        <!-- Form Start -->
+        <form method="POST">
+            {% csrf_token %}
+
+            <!-- Form Details Section -->
+            <div class="card mb-4">
+                <div class="card-header">
+                    <h5 class="card-title mb-0">Form Details</h5>
+                </div>
+                <div class="card-body">
+                    {{ form.as_p }}
+                </div>
+            </div>
+
+            <!-- Buttons -->
+            <div class="d-flex justify-content-end align-items-center mb-4">
+                <button type="submit" class="btn btn-warning">Save Form</button>
+            </div>
+
+            <!-- Questions Section -->
+            <h3 class="mb-3">Questions</h3>
+
+            <div id="question-formset" class="mb-4">
+                {{ question_formset.management_form }}
+                {% for form in question_formset %}
+                    <div class="question-form mb-3 p-3 border rounded shadow-sm">
+                        <!-- Question Header with flex layout -->
+                        <div class="question-header">
+                            <h5 class="question-number">Question {{ forloop.counter }}</h5>
+                            <!-- Move Up and Move Down Buttons with Icons -->
+                            <div class="move-buttons">
+                                <button type="button" class="btn btn-secondary move-up">
+                                    <!-- Inline SVG for "Move Up" icon -->
+                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up-short" viewBox="0 0 16 16">
+                                        <path fill-rule="evenodd" d="M8 12a.5.5 0 0 1-.5-.5V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5A.5.5 0 0 1 8 12z"/>
+                                    </svg>
+                                </button>
+                                <button type="button" class="btn btn-secondary move-down">
+                                    <!-- Inline SVG for "Move Down" icon -->
+                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down-short" viewBox="0 0 16 16">
+                                        <path fill-rule="evenodd" d="M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 1 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4z"/>
+                                    </svg>
+                                </button>
+                            </div>
+                        </div>
+                        {{ form.non_field_errors }}
+                        {% for hidden in form.hidden_fields %}
+                            {{ hidden }}
+                        {% endfor %}
+                        {{ form.as_p }}
+                    </div>
+                {% endfor %}
+            </div>
+
+            <!-- Hidden Empty Form Template -->
+            <div id="empty-form-template" style="display: none;">
+                <div class="question-form mb-3 p-3 border rounded shadow-sm">
+                    <!-- Question Header with flex layout -->
+                    <div class="question-header">
+                        <h5 class="question-number">Question</h5>
+                        <!-- Move Up and Move Down Buttons with Icons -->
+                        <div class="move-buttons">
+                            <button type="button" class="btn btn-secondary move-up">
+                                <!-- Inline SVG for "Move Up" icon -->
+                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up-short" viewBox="0 0 16 16">
+                                    <path fill-rule="evenodd" d="M8 12a.5.5 0 0 1-.5-.5V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5A.5.5 0 0 1 8 12z"/>
+                                </svg>
+                            </button>
+                            <button type="button" class="btn btn-secondary move-down">
+                                <!-- Inline SVG for "Move Down" icon -->
+                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down-short" viewBox="0 0 16 16">
+                                    <path fill-rule="evenodd" d="M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 1 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4z"/>
+                                </svg>
+                            </button>
+                        </div>
+                    </div>
+                    {{ question_formset.empty_form.non_field_errors }}
+                    {% for hidden in question_formset.empty_form.hidden_fields %}
+                        {{ hidden }}
+                    {% endfor %}
+                    {{ question_formset.empty_form.as_p }}
+                </div>
+            </div>
+
+            <!-- Buttons -->
+            <div class="d-flex justify-content-between align-items-center mb-4">
+                <button type="button" id="add-question" class="btn btn-dark">Add Question</button>
+                <button type="submit" class="btn btn-warning">Save Form</button>
+            </div>
+        </form>
+    </div>
+
+    <!-- JavaScript Code -->
+    <script>
+        document.addEventListener('DOMContentLoaded', function() {
+            // Get the TOTAL_FORMS input to track the number of forms
+            let totalForms = document.querySelector('[name="{{ question_formset.prefix }}-TOTAL_FORMS"]');
+            let formCount = parseInt(totalForms.value);  // Current form count
+
+            // Function to reindex forms and update question numbers and order fields
+            function reindexForms() {
+                const allForms = document.querySelectorAll('#question-formset .question-form');
+                const visibleForms = [];
+
+                allForms.forEach(function(form, index) {
+                    // Update names and IDs
+                    form.querySelectorAll('input, select, textarea, label').forEach(function(element) {
+                        if (element.name) {
+                            element.name = element.name.replace(/-(\d+)-/, `-${index}-`);
+                        }
+                        if (element.id) {
+                            element.id = element.id.replace(/-(\d+)-/, `-${index}-`);
+                        }
+                        if (element.htmlFor) {
+                            element.htmlFor = element.htmlFor.replace(/-(\d+)-/, `-${index}-`);
+                        }
+                    });
+
+                    // Update question number display
+                    const questionNumberElement = form.querySelector('.question-number');
+                    if (questionNumberElement) {
+                        questionNumberElement.textContent = `Question ${index + 1}`;
+                    }
+
+                    // Collect visible forms
+                    if (form.style.display !== 'none') {
+                        visibleForms.push(form);
+                    }
+                });
+
+                visibleForms.forEach(function(form, visibleIndex) {
+                    // Update 'order' field value
+                    let orderInput = form.querySelector('input[name$="-order"]');
+                    if (orderInput) {
+                        orderInput.value = visibleIndex + 1;
+                    }
+
+                    // Enable or disable move buttons based on position among visible forms
+                    const moveUpButton = form.querySelector('.move-up');
+                    const moveDownButton = form.querySelector('.move-down');
+
+                    if (moveUpButton) {
+                        moveUpButton.disabled = visibleIndex === 0;
+                    }
+                    if (moveDownButton) {
+                        moveDownButton.disabled = visibleForms.length === 1 || visibleIndex === visibleForms.length - 1;
+                    }
+                });
+
+                // Update TOTAL_FORMS value
+                totalForms.value = allForms.length;
+            }
+
+            // Add event listeners to the delete checkboxes to hide the form when checked
+            function attachDeleteCheckboxListener(form) {
+                let deleteCheckbox = form.querySelector('input[type="checkbox"][name$="-DELETE"]');
+                if (deleteCheckbox) {
+                    deleteCheckbox.addEventListener('change', function() {
+                        if (this.checked) {
+                            form.style.display = 'none';  // Hide the form when the checkbox is checked
+                        } else {
+                            form.style.display = '';  // Show the form if checkbox is unchecked
+                        }
+                        reindexForms();  // Reindex forms after deletion or undeletion
+                    });
+                }
+            }
+
+            // Add a new question form when the "Add Question" button is clicked
+            document.getElementById('add-question').addEventListener('click', function() {
+                // Clone the empty form template
+                let formClone = document.querySelector('#empty-form-template .question-form').cloneNode(true);
+                formClone.style.display = ''; // Ensure the cloned form is visible
+
+                // Update names and IDs with the new index
+                formClone.querySelectorAll('input, select, textarea, label').forEach(function(element) {
+                    if (element.name) {
+                        element.name = element.name.replace(/__prefix__/, formCount);
+                    }
+                    if (element.id) {
+                        element.id = element.id.replace(/__prefix__/, formCount);
+                    }
+                    if (element.htmlFor) {
+                        element.htmlFor = element.htmlFor.replace(/__prefix__/, formCount);
+                    }
+
+                    // Reset values
+                    if (element.type === 'checkbox' || element.type === 'radio') {
+                        element.checked = false;
+                    } else if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA' || element.tagName === 'SELECT') {
+                        element.value = '';
+                    }
+                });
+
+                // Append the cloned form to the formset container
+                document.getElementById('question-formset').appendChild(formClone);
+
+                // Attach event listeners to the cloned form's buttons
+                attachEventListeners(formClone);
+                attachDeleteCheckboxListener(formClone);
+
+                // Increment form count and update TOTAL_FORMS
+                formCount++;
+                totalForms.value = formCount;
+
+                // Reindex forms and update question numbers
+                reindexForms();
+            });
+
+            // Function to attach event listeners to form buttons
+            function attachEventListeners(form) {
+                // Move Up button
+                let moveUpButton = form.querySelector('.move-up');
+                if (moveUpButton) {
+                    moveUpButton.addEventListener('click', function() {
+                        let visibleForms = Array.from(document.querySelectorAll('#question-formset .question-form')).filter(f => f.style.display !== 'none');
+                        let currentIndex = visibleForms.indexOf(form);
+                        if (currentIndex > 0) {
+                            let previousForm = visibleForms[currentIndex - 1];
+                            form.parentNode.insertBefore(form, previousForm);
+                            reindexForms();
+                        }
+                    });
+                }
+
+                // Move Down button
+                let moveDownButton = form.querySelector('.move-down');
+                if (moveDownButton) {
+                    moveDownButton.addEventListener('click', function() {
+                        let visibleForms = Array.from(document.querySelectorAll('#question-formset .question-form')).filter(f => f.style.display !== 'none');
+                        let currentIndex = visibleForms.indexOf(form);
+                        if (currentIndex < visibleForms.length - 1) {
+                            let nextForm = visibleForms[currentIndex + 1];
+                            form.parentNode.insertBefore(nextForm, form);
+                            reindexForms();
+                        }
+                    });
+                }
+            }
+
+            // Attach event listeners to all initial forms
+            document.querySelectorAll('#question-formset .question-form').forEach(form => {
+                attachEventListeners(form);
+                attachDeleteCheckboxListener(form);
+            });
+
+            // Initial reindexing to set correct move button visibility and question numbers
+            reindexForms();
+        });
+    </script>
+
+</body>
+</html>
diff --git a/app/forms/templates/forms/formtypes/formtype_confirm_delete.html b/app/forms/templates/forms/formtypes/formtype_confirm_delete.html
new file mode 100644
index 0000000..fd004ba
--- /dev/null
+++ b/app/forms/templates/forms/formtypes/formtype_confirm_delete.html
@@ -0,0 +1,6 @@
+<h1>Delete Form Type</h1>
+<p>Are you sure you want to delete {{ object.name }}?</p>
+<form method="post">
+    {% csrf_token %}
+    <button type="submit">Confirm Delete</button>
+</form>
diff --git a/app/forms/templates/forms/formtypes/formtype_form.html b/app/forms/templates/forms/formtypes/formtype_form.html
new file mode 100644
index 0000000..e16eb6f
--- /dev/null
+++ b/app/forms/templates/forms/formtypes/formtype_form.html
@@ -0,0 +1,6 @@
+<h1>{{ form.instance.pk|yesno:"Edit FormType,Create FormType" }}</h1>
+<form method="post">
+    {% csrf_token %}
+    {{ form.as_p }}
+    <button type="submit">Save</button>
+</form>
diff --git a/app/forms/templates/forms/formtypes/formtype_list.html b/app/forms/templates/forms/formtypes/formtype_list.html
new file mode 100644
index 0000000..0b664d7
--- /dev/null
+++ b/app/forms/templates/forms/formtypes/formtype_list.html
@@ -0,0 +1,7 @@
+<h1>Form Types</h1>
+<a href="{% url 'formtype_create' %}">Create new form type</a>
+<ul>
+    {% for formtype in formtypes %}
+        <li>{{ formtype.name }} - <a href="{% url 'formtype_edit' formtype.id %}">Edit</a> | <a href="{% url 'formtype_delete' formtype.id %}">Delete</a></li>
+    {% endfor %}
+</ul>
diff --git a/app/forms/templates/forms/index.html b/app/forms/templates/forms/index.html
new file mode 100644
index 0000000..3b79fc5
--- /dev/null
+++ b/app/forms/templates/forms/index.html
@@ -0,0 +1,55 @@
+{% load static %}
+{% load django_bootstrap5 %}
+<!doctype html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1">
+    {% bootstrap_css %}
+    {% bootstrap_javascript %}
+    <style>
+        .card-hover {
+            transition: transform 0.2s, box-shadow 0.2s;
+        }
+        .card-hover:hover {
+            transform: translateY(-1px);
+            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
+        }
+        .list-group-item {
+            background-color: white;
+            border: 1px solid #ddd;
+            margin-bottom: 10px;
+            border-radius: 5px;
+        }
+    </style>
+</head>
+<body>
+    <nav class="navbar navbar-expand-lg navbar-light bg-light">
+        <a class="navbar-brand" href="{% url 'pms_index' %}">
+            <button type="button" class="btn btn-outline-dark mx-3">Back</button>
+        </a>
+        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
+            <span class="navbar-toggler-icon"></span>
+        </button>
+    </nav>
+    <div class="container mt-5">
+        <h1>Forms Index</h1>
+        <hr>
+        <ul class="list-group">
+            <!-- <li class="list-group-item card-hover">
+                <a href="{% url 'scrap_form_management' %}" class="text-decoration-none text-dark">
+                    <h5 class="mb-1">Scrap Forms Management</h5>
+                    <p class="mb-1">Manage and create new scrap forms</p>
+                </a>
+            </li> -->
+            <li class="list-group-item card-hover">
+                <a href="{% url 'find_forms' %}" class="text-decoration-none text-dark">
+                    <h5 class="mb-1">Forms</h5>
+                    <p class="mb-1">Pick a form type to create and manage as many forms as you like</p>
+                </a>
+            </li>
+
+        </ul>        
+    </div>
+</body>
+</html>
diff --git a/app/forms/templates/forms/lpa.html b/app/forms/templates/forms/lpa.html
new file mode 100644
index 0000000..bf01786
--- /dev/null
+++ b/app/forms/templates/forms/lpa.html
@@ -0,0 +1,223 @@
+{% load static %}
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <link href="{% static 'bootstrap/css/bootstrap.min.css' %}" rel="stylesheet">
+    <script src="{% static 'bootstrap/js/bootstrap.bundle.min.js' %}"></script>
+    <title>{{ form_instance.name }}</title>
+    <style>
+        body {
+            background-color: #f8f9fa;
+        }
+        .container {
+            max-width: 800px;
+            margin: 30px auto;
+            padding: 20px;
+            background-color: white;
+            border-radius: 8px;
+            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
+        }
+        .table {
+            border-radius: 5px;
+            overflow: hidden;
+        }
+        .details {
+            font-size: 0.9rem;
+            color: #555;
+            margin-top: 0.5rem;
+        }
+        .is-invalid {
+            border-color: red;
+        }
+        .issue-action-container {
+            display: none;
+            margin-top: 10px;
+        }
+    </style>
+</head>
+<body>
+    <div class="container">
+        <!-- Form Title -->
+        <h2 class="text-center mb-4">{{ form_instance.name }}</h2>
+
+        <form method="POST" id="questionsForm">
+            {% csrf_token %}
+            {{ formset.management_form }}
+
+            <!-- Error Message -->
+            {% if error_message %}
+            <div class="alert alert-danger" role="alert">
+                {{ error_message }}
+            </div>
+            {% endif %}
+
+            <!-- Operator Number -->
+            <div class="mb-4">
+                <label for="operator_number" class="form-label fw-bold">Operator Number:</label>
+                <input type="number" id="operator_number" name="operator_number" 
+                       class="form-control" placeholder="Enter your operator number" 
+                       required 
+                       value="{{ operator_number }}">
+            </div>
+            
+            <hr> <!-- Separator -->
+
+            <!-- Questions Table -->
+            <div class="table-responsive">
+                <table class="table table-striped table-hover table-bordered align-middle">
+                    <thead class="table-dark">
+                        <tr>
+                            <th style="width: 60%;">Question</th>
+                            <th style="width: 40%;">Answer</th>
+                        </tr>
+                    </thead>
+                    <tbody>
+                        {% for question, form in question_form_pairs %}
+                        <tr>
+                            <!-- Question Column -->
+                            <td>
+                                {{ question.question.question_text }}
+
+                                <!-- (Optional) Additional Details -->
+                                {% if question.question.what_to_look_for %}
+                                <div class="details">
+                                    <strong>What to Look For:</strong> {{ question.question.what_to_look_for }}
+                                </div>
+                                {% endif %}
+
+                                {% if question.question.recommended_action %}
+                                <div class="details">
+                                    <strong>Recommended Action:</strong> {{ question.question.recommended_action }}
+                                </div>
+                                {% endif %}
+                            </td>
+
+                            <!-- Answer Column -->
+                            <td>
+                                {% if not question.question.typed_answer %}
+                                <div class="form-group yes-no-container">
+                                    <!-- Dropdown for Yes/No -->
+                                    {{ form.answer }}
+                                </div>
+                                {% endif %}
+
+                                <!-- Input field for additional input -->
+                                {% if question.question.typed_answer %}
+                                <div class="mt-2">
+                                    {{ form.additional_input }}
+                                </div>
+                                {% endif %}
+
+                                <!-- Issue and Action Taken -->
+                                <div class="issue-action-container mt-2">
+                                    <div class="mb-2">
+                                        <label for="issue_{{ forloop.counter }}" class="form-label">Issue:</label>
+                                        {{ form.issue }}
+                                    </div>
+                                    <div>
+                                        <label for="action_taken_{{ forloop.counter }}" class="form-label">Action Taken:</label>
+                                        {{ form.action_taken }}
+                                    </div>
+                                </div>
+                            </td>
+                        </tr>
+                        {% endfor %}
+                    </tbody>
+                </table>
+            </div>
+
+            <!-- Submit Button -->
+            <div class="d-flex justify-content-end">
+                <button type="submit" class="btn btn-warning">Submit</button>
+            </div>
+        </form>
+    </div>
+
+<script>
+    document.addEventListener('DOMContentLoaded', function () {
+        const answerDropdowns = document.querySelectorAll('select[name$="answer"]');
+
+        // Function to toggle Issue and Action Taken fields
+        function toggleIssueActionFields() {
+            answerDropdowns.forEach(dropdown => {
+                const row = dropdown.closest('tr');
+                const issueActionContainer = row.querySelector('.issue-action-container');
+                const issueField = row.querySelector('textarea[name$="issue"]');
+                const actionField = row.querySelector('textarea[name$="action_taken"]');
+
+                if (dropdown.value === 'No') {
+                    issueActionContainer.style.display = 'block';
+                    issueField.removeAttribute('disabled');
+                    actionField.removeAttribute('disabled');
+                } else {
+                    issueActionContainer.style.display = 'none';
+                    issueField.setAttribute('disabled', 'true');
+                    actionField.setAttribute('disabled', 'true');
+                }
+            });
+        }
+
+        // Attach event listeners to dropdowns to trigger the toggle function on change
+        answerDropdowns.forEach(dropdown => {
+            dropdown.addEventListener('change', toggleIssueActionFields);
+        });
+
+        // Run the toggle function initially to ensure the UI is correct on load
+        toggleIssueActionFields();
+    });
+</script>
+
+<script>
+    document.getElementById('questionsForm').addEventListener('submit', function(event) {
+        const rows = document.querySelectorAll('tr');
+        let allAnswered = true;
+
+        rows.forEach(row => {
+            const dropdown = row.querySelector('select[name$="answer"]');
+            const additionalInputField = row.querySelector('input[name$="additional_input"]');
+            const issueField = row.querySelector('textarea[name$="issue"]');
+            const actionField = row.querySelector('textarea[name$="action_taken"]');
+
+            // Reset validation errors
+            if (dropdown) dropdown.classList.remove('is-invalid');
+            if (additionalInputField) additionalInputField.classList.remove('is-invalid');
+            if (issueField) issueField.classList.remove('is-invalid');
+            if (actionField) actionField.classList.remove('is-invalid');
+
+            // Validation for rows with dropdown (Yes/No answer)
+            if (dropdown && !dropdown.value) {
+                dropdown.classList.add('is-invalid');
+                allAnswered = false;
+            }
+
+            // Additional validation when "No" is selected
+            if (dropdown && dropdown.value === 'No') {
+                if (!issueField || !issueField.value.trim()) {
+                    issueField.classList.add('is-invalid');
+                    allAnswered = false;
+                }
+                if (!actionField || !actionField.value.trim()) {
+                    actionField.classList.add('is-invalid');
+                    allAnswered = false;
+                }
+            }
+
+            // Validation for rows with additional input
+            if (additionalInputField && !additionalInputField.value.trim()) {
+                additionalInputField.classList.add('is-invalid');
+                allAnswered = false;
+            }
+        });
+
+        // Prevent form submission if validation fails
+        if (!allAnswered) {
+            event.preventDefault();
+            alert('Please complete all required fields. Provide an answer or additional input for all questions.');
+        }
+    });
+</script>
+
+</body>
+</html>
diff --git a/app/forms/templates/forms/ois.html b/app/forms/templates/forms/ois.html
new file mode 100644
index 0000000..51f0e76
--- /dev/null
+++ b/app/forms/templates/forms/ois.html
@@ -0,0 +1,114 @@
+{% load static %}
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <link href="{% static 'bootstrap/css/bootstrap.min.css' %}" rel="stylesheet">
+    <script src="{% static 'bootstrap/js/bootstrap.bundle.min.js' %}"></script>
+    <title>{{ form_instance.name }}</title>
+    <style>
+            body {
+                background-color: #c8ccd5; /* Slightly darker background color for the entire page */
+            }
+            .container {
+                max-width: 900px;
+                margin-top: 30px;
+            }
+            .form-container {
+                padding: 25px;
+                background-color: #f8f9fa;
+                border-radius: 8px;
+                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
+            }
+            .table {
+                border-radius: 5px;
+                box-shadow: 0 0 8px rgba(0, 0, 0, 0.1);
+            }
+            .form-check-inline {
+                margin-right: 15px;
+            }
+            .input-cell {
+                width: 100%;
+            }
+            .logo {
+                height: 38px;
+            }
+        
+    </style>
+</head>
+<body>
+    <div class="container">
+        <h2 class="text-center mb-4">{{ form_instance.name }}</h2>
+        
+        <div class="form-container">
+            <form method="POST">
+                {% csrf_token %}
+                {{ formset.management_form }}
+
+                <!-- Display error message if any -->
+                {% if error_message %}
+                <div class="alert alert-danger" role="alert">
+                    {{ error_message }}
+                </div>
+                {% endif %}
+
+                <!-- Logo and Operator Number Input -->
+                <div class="text-center mb-4">
+                    <!-- JE Logo centered -->
+                    <img src="{% static 'images/JE_Logo_PNG.png' %}" alt="JE Logo" class="logo mx-auto">
+                </div>
+                <div class="mb-4">
+                    <label for="operator_number" class="form-label fw-bold">Operator Number:</label>
+                    <input type="text" id="operator_number" name="operator_number" 
+                           class="form-control" placeholder="Enter operator number" 
+                           required inputmode="numeric" pattern="[0-9]*" 
+                           value="{{ operator_number }}">
+                </div>
+
+                <hr> <!-- Separator line -->
+
+                <!-- Table for Question Form Pairs -->
+                <div class="table-responsive mb-4">
+                    <table class="table table-striped table-hover table-bordered align-middle">
+                        <thead class="table-dark">
+                            <tr>
+                                <th>Feature</th>
+                                <th>Characteristic</th>
+                                <th>Specifications</th>
+                                <th>Sample Size</th>
+                                <th>Sample Frequency</th>
+                                <th>Done By</th>
+                                <th>Input</th>
+                            </tr>
+                        </thead>
+                        <tbody>
+                            {% for question, form in question_form_pairs %}
+                            <tr>
+                                <td>{{ question.question.feature }}</td>
+                                <td>{{ question.question.characteristic }}</td>
+                                <td>{{ question.question.specifications }}</td>
+                                <td>{{ question.question.sample_size }}</td>
+                                <td>{{ question.question.sample_frequency }}</td>
+                                <td>{{ question.question.done_by }}</td>
+                                <td>
+                                    <div class="input-cell">
+                                        {{ form.answer }}
+                                    </div>
+                                </td>
+                            </tr>
+                            {% endfor %}
+                        </tbody>                                              
+                    </table>
+                </div>
+
+                <!-- Submit Button Section -->
+                <div class="d-flex justify-content-between">
+                    <a href="{% url 'view_records' form_instance.id %}" class="btn btn-dark">View Records</a>
+                    <button type="submit" class="btn btn-warning">Submit</button>
+                </div>
+            </form>
+        </div>
+    </div>
+</body>
+</html>
diff --git a/app/forms/templates/forms/select_form_type.html b/app/forms/templates/forms/select_form_type.html
new file mode 100644
index 0000000..aaa11e2
--- /dev/null
+++ b/app/forms/templates/forms/select_form_type.html
@@ -0,0 +1,84 @@
+{% load static %}
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Select Form Type</title>
+    <link href="{% static 'bootstrap/css/bootstrap.min.css' %}" rel="stylesheet">
+    <script src="{% static 'bootstrap/js/bootstrap.bundle.min.js' %}"></script>
+</head>
+<body>
+    <!-- Navbar -->
+    <nav class="navbar navbar-expand-lg navbar-light bg-light">
+        <div class="container-fluid">
+            <a class="navbar-brand" href="{% url 'forms_index' %}">
+                <button type="button" class="btn btn-outline-dark">Back</button>
+            </a>
+            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
+                <span class="navbar-toggler-icon"></span>
+            </button>
+            <div class="collapse navbar-collapse" id="navbarNav">
+                <!-- Additional navbar content can go here if needed -->
+            </div>
+        </div>
+    </nav>
+
+    <!-- Page Content -->
+    <div class="container my-5">
+        <div class="row justify-content-center">
+            <div class="col-md-6">
+                <!-- Card with logo and form type selection -->
+                <div class="card shadow-lg">
+                    <div class="card-body text-center">
+                        <!-- Logo centered at the top of the card -->
+                        <img src="{% static 'images/JE_Logo_PNG.png' %}" alt="JE Logo" class="mb-3" style="height: 50px;">
+                        
+                        <h1 class="card-title mb-4">Select Form Type</h1>
+                        
+                        <!-- Form to select the Form Type -->
+                        <form id="form_type_form">
+                            <div class="mb-3 text-start">
+                                <label for="form_type" class="form-label">Form Type:</label>
+                                <select name="form_type" id="form_type" class="form-select" required>
+                                    <option value="" disabled selected>Select a Form Type</option>
+                                    {% for form_type in form_types %}
+                                        <option value="{{ form_type.id }}">{{ form_type.name }}</option>
+                                    {% endfor %}
+                                </select>
+                            </div>
+
+                            <!-- Action buttons for form creation and form finding -->
+                            <div class="d-grid gap-2">
+                                <!-- Create a new form button -->
+                                <a id="create_form_btn" href="#" class="btn btn-secondary">Create Form</a>
+
+                                <!-- Find existing forms button -->
+                                <a id="find_forms_btn" href="#" class="btn btn-warning">Find Forms</a>
+                            </div>
+                        </form>
+                    </div>
+                </div>
+            </div>
+        </div>
+    </div>
+
+    <script>
+        // Update URLs dynamically when a form type is selected
+        const formTypeSelect = document.getElementById('form_type');
+        const createFormBtn = document.getElementById('create_form_btn');
+        const findFormsBtn = document.getElementById('find_forms_btn');
+
+        formTypeSelect.addEventListener('change', function () {
+            const formTypeId = this.value;
+
+            // Update the "Create Form" button URL
+            createFormBtn.href = `{% url 'form_create' %}?form_type=` + formTypeId;
+
+            // Update the "Find Forms" button URL
+            findFormsBtn.href = `{% url 'find_forms' %}?form_type=` + formTypeId;
+        });
+    </script>
+
+</body>
+</html>
diff --git a/app/forms/templates/forms/tpm.html b/app/forms/templates/forms/tpm.html
new file mode 100644
index 0000000..5c79e82
--- /dev/null
+++ b/app/forms/templates/forms/tpm.html
@@ -0,0 +1,14 @@
+{% load static %}
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <link href="{% static 'bootstrap/css/bootstrap.min.css' %}" rel="stylesheet">
+    <script src="{% static 'bootstrap/js/bootstrap.bundle.min.js' %}"></script>
+    <title>{{ form_instance.name }}</title>
+</head>
+<body>
+   HELLO
+</body>
+</html>
diff --git a/app/forms/templates/forms/view_records.html b/app/forms/templates/forms/view_records.html
new file mode 100644
index 0000000..6755f72
--- /dev/null
+++ b/app/forms/templates/forms/view_records.html
@@ -0,0 +1,57 @@
+{% load static %}
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title>View Records for {{ form_instance.name }}</title>
+    <link href="{% static 'bootstrap/css/bootstrap.min.css' %}" rel="stylesheet">
+    <script src="{% static 'bootstrap/js/bootstrap.bundle.min.js' %}"></script>
+    <style>
+        .table-responsive {
+            overflow-x: auto;
+        }
+        .table th, .table td {
+            white-space: nowrap;
+        }
+    </style>
+</head>
+<body>
+    <div class="container mt-5">
+        <h2>Questions and Submissions for Form: {{ form_instance.name }}</h2>
+
+        <div class="table-responsive">
+            <table class="table table-bordered">
+                <thead>
+                    <tr>
+                        <th>Feature</th>
+                        <th>Characteristic</th>
+                        {% for timestamp in submission_timestamps %}
+                            <th><small>{{ timestamp }}</small></th>
+                        {% endfor %}
+                    </tr>
+                </thead>
+                <tbody>
+                    {% for row in submission_data %}
+                    <tr>
+                        <td>{{ row.feature }}</td>
+                        <td>{{ row.characteristic }}</td>
+
+                        {% for answer in row.answers %}
+                            <td class="{% if answer.blank %}table-secondary{% endif %}">
+                                {% if not answer.blank %}
+                                    <strong>{{ answer.answer }}</strong><br>
+                                {% else %}
+                                    <!-- Mark cell as blank -->
+                                {% endif %}
+                            </td>
+                        {% endfor %}
+                    </tr>
+                    {% endfor %}
+                </tbody>
+            </table>
+        </div>
+
+        <a href="{% url 'form_questions' form_instance.id %}" class="btn btn-dark mt-3">Back to Form</a>
+    </div>
+</body>
+</html>
diff --git a/app/forms/tests.py b/app/forms/tests.py
new file mode 100644
index 0000000..7ce503c
--- /dev/null
+++ b/app/forms/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/app/forms/urls.py b/app/forms/urls.py
new file mode 100644
index 0000000..f919fad
--- /dev/null
+++ b/app/forms/urls.py
@@ -0,0 +1,28 @@
+from django.urls import path
+from .views import *
+
+urlpatterns = [
+    path('', index, name='forms_index'),
+    # FormType URLs
+    path('formtypes/', FormTypeListView.as_view(), name='formtype_list'),
+    path('formtypes/new/', FormTypeCreateView.as_view(), name='formtype_create'),
+    path('formtypes/<int:pk>/edit/', FormTypeUpdateView.as_view(), name='formtype_edit'),
+    path('formtypes/<int:pk>/delete/', FormTypeDeleteView.as_view(), name='formtype_delete'),
+
+    path('create/', form_create_view, name='form_create'),
+    path('edit/<int:form_id>/', form_create_view, name='form_edit'),  # Edit form URL
+    path('find/', find_forms_view, name='find_forms'),  # Add this new URL
+
+
+    path('bulk_question_create/', bulk_form_and_question_create_view, name='bulk_question_create'),
+
+
+    path('form/<int:form_id>/', form_questions_view, name='form_questions'),
+    path('form/', form_by_metadata_view, name='form_by_metadata'),
+
+    path('smart_form/<int:form_id>/', smart_form_redirect_view, name='smart_form'),
+
+
+    path('form/<int:form_id>/records/', view_records, name='view_records'),  # New URL for viewing records
+
+]
diff --git a/app/forms/views.py b/app/forms/views.py
new file mode 100644
index 0000000..b22dabd
--- /dev/null
+++ b/app/forms/views.py
@@ -0,0 +1,580 @@
+from django.shortcuts import render, redirect, get_object_or_404
+from .forms import FORM_TYPE_FORMS, OISQuestionForm
+from .models import FormType, Form, FormQuestion
+from django.forms import modelformset_factory
+from django.urls import reverse_lazy
+from django.views.generic import ListView, CreateView, UpdateView, DeleteView
+
+
+
+def index(request):
+    return render(request, 'forms/index.html')
+
+
+# CRUD for FormType
+class FormTypeListView(ListView):
+    model = FormType
+    template_name = 'forms/formtypes/formtype_list.html'
+    context_object_name = 'formtypes'
+
+
+class FormTypeCreateView(CreateView):
+    model = FormType
+    fields = ['name', 'template_name']
+    template_name = 'forms/formtypes/formtype_form.html'
+    success_url = reverse_lazy('formtype_list')
+
+
+class FormTypeUpdateView(UpdateView):
+    model = FormType
+    fields = ['name', 'template_name']
+    template_name = 'forms/formtypes/formtype_form.html'
+    success_url = reverse_lazy('formtype_list')
+
+
+class FormTypeDeleteView(DeleteView):
+    model = FormType
+    template_name = 'forms/formtypes/formtype_confirm_delete.html'
+    success_url = reverse_lazy('formtype_list')
+
+
+
+
+# View to create form and its questions
+from django.shortcuts import render, redirect, get_object_or_404
+from .forms import FORM_TYPE_FORMS, QUESTION_FORM_CLASSES
+from .models import FormType, Form, FormQuestion
+from django.forms import modelformset_factory
+
+def form_create_view(request, form_id=None):
+    form_instance = None
+    form_type = None
+    if form_id:
+        # Fetch the existing form to edit
+        form_instance = get_object_or_404(Form, id=form_id)
+        form_type = form_instance.form_type
+    else:
+        # Fetch the form type from the request for new forms
+        form_type_id = request.GET.get('form_type')
+        if form_type_id:
+            form_type = get_object_or_404(FormType, id=form_type_id)
+
+    if form_type:
+        # Dynamically get the form class for the form type
+        form_class = FORM_TYPE_FORMS.get(form_type.name)
+        question_form_class = QUESTION_FORM_CLASSES.get(form_type.name)
+
+        if form_class is None or question_form_class is None:
+            return render(request, 'forms/error.html', {'message': 'Form type not supported.'})
+
+        # Create a dynamic formset for questions
+        QuestionFormSet = modelformset_factory(
+            FormQuestion,
+            form=question_form_class,
+            extra=0,  # Set extra to 0 to prevent empty forms unless added by the user
+            can_delete=True  # Allow deletion of forms
+        )
+
+        if request.method == 'POST':
+            form = form_class(request.POST, instance=form_instance)
+            question_formset = QuestionFormSet(
+                request.POST,
+                queryset=form_instance.questions.order_by('question__order') if form_instance else FormQuestion.objects.none()
+            )
+
+            if form.is_valid() and question_formset.is_valid():
+                form_instance = form.save()
+
+                # Save each question in the formset
+                for index, question_form in enumerate(question_formset.forms, start=1):
+                    if question_form.cleaned_data and not question_form.cleaned_data.get('DELETE', False):
+                        question_form.save(form_instance=form_instance, order=index)
+                    elif question_form.cleaned_data.get('DELETE', False) and question_form.instance.pk:
+                        # If the form is marked for deletion and exists in the DB, delete it
+                        question_form.instance.delete()
+
+                return redirect('form_edit', form_id=form_instance.id)  # Redirect after saving
+
+        else:
+            # Fetch questions ordered by the 'order' field in the JSON
+            form = form_class(instance=form_instance)
+            question_formset = QuestionFormSet(
+                queryset=form_instance.questions.order_by('question__order') if form_instance else FormQuestion.objects.none()
+            )
+
+        return render(request, 'forms/form_create.html', {
+            'form': form,
+            'question_formset': question_formset,
+            'form_type': form_type
+        })
+
+    # If no form_type is provided, show a page to select the form type
+    form_types = FormType.objects.all()
+    return render(request, 'forms/select_form_type.html', {'form_types': form_types})
+
+
+
+
+
+
+
+
+# =============================================================================
+# =============================================================================
+# ======================= Find forms Now ======================================
+# =============================================================================
+# =============================================================================
+
+
+from django.shortcuts import render, get_object_or_404
+from .models import Form, FormType
+
+def find_forms_view(request):
+    # Get the form type ID from the request
+    form_type_id = request.GET.get('form_type')
+
+    if form_type_id:
+        # Fetch the FormType object
+        form_type = get_object_or_404(FormType, id=form_type_id)
+        
+        # Fetch the forms of that form type, ordering by created_at descending
+        forms = Form.objects.filter(form_type_id=form_type_id).order_by('-created_at')
+        
+        # Gather all unique metadata keys across all forms for this form type
+        metadata_keys = set()
+        for form in forms:
+            metadata_keys.update(form.metadata.keys())  # Assuming `metadata` is a dictionary
+
+        return render(request, 'forms/find_forms.html', {
+            'form_type': form_type,
+            'forms': forms,
+            'metadata_keys': metadata_keys,
+        })
+
+    # If no form type is selected, display the form type selection
+    form_types = FormType.objects.all()
+    return render(request, 'forms/select_form_type.html', {
+        'form_types': form_types,
+    })
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+# ==============================================================================
+# ==============================================================================
+# ======================== Bulk insert tool ====================================
+# ==============================================================================
+# ==============================================================================
+
+
+from django.shortcuts import render, redirect
+from .models import Form, FormQuestion, FormType
+import json
+
+def bulk_form_and_question_create_view(request):
+    if request.method == 'POST':
+        data_json = request.POST.get('data_json')
+        delete_existing = request.POST.get('delete_existing') == 'on'
+
+        try:
+            data = json.loads(data_json)
+        except json.JSONDecodeError as e:
+            return render(request, 'forms/bulk_question_create.html', {
+                'error': f'Invalid JSON data: {e}',
+                'data_json': data_json,
+            })
+
+        form_data = data.get('form')
+        questions_data = data.get('questions', [])
+
+        # Create the new OIS Form
+        form_instance = Form(
+            name=form_data.get('name'),
+            form_type=FormType.objects.get(name="OIS"),
+            metadata={
+                'part_number': form_data.get('part_number'),
+                'operation': form_data.get('operation'),
+                'part_name': form_data.get('part_name'),
+                'year': form_data.get('year'),
+                'mod_level': form_data.get('mod_level'),
+                'machine': form_data.get('machine'),
+                'mod_date': form_data.get('mod_date')
+            }
+        )
+        form_instance.save()
+
+        # Optionally delete existing questions if specified
+        if delete_existing:
+            form_instance.questions.all().delete()
+
+        # Create questions associated with this form
+        for index, question_data in enumerate(questions_data, start=1):
+            question_data['order'] = question_data.get('order', index)
+            FormQuestion.objects.create(
+                form=form_instance,
+                question=question_data
+            )
+
+        return redirect('form_edit', form_id=form_instance.id)
+
+    else:
+        return render(request, 'forms/bulk_question_create.html')
+
+
+
+
+
+# {
+#     "form": {
+#         "name": "Sample OIS Form",
+#         "part_number": "PN123",
+#         "operation": "Op456",
+#         "part_name": "Sample Part",
+#         "year": "2023",
+#         "mod_level": "A1",
+#         "machine": "Machine XYZ",
+#         "mod_date": "2023-11-11"
+#     },
+#     "questions": [
+#         {
+#             "feature": "67",
+#             "special_characteristic": "Bu",
+#             "characteristic": "Hub OD (Air Gauge)",
+#             "specifications": "Ø30.187 - Ø30.213 mm",
+#             "sample_frequency": "100%",
+#             "sample_size": "100%",
+#             "done_by": "OP/QA",
+#             "checkmark": true
+#         },
+#         {
+#             "feature": "HP",
+#             "special_characteristic": "D",
+#             "characteristic": "Hole(s) Presence (Visual/Gauge)",
+#             "specifications": "Present YES / NO",
+#             "sample_frequency": "100%",
+#             "sample_size": "100%",
+#             "done_by": "OP / QA",
+#             "checkmark": false
+#         }
+#         // Add more questions as needed...
+#     ]
+# }
+
+
+
+
+
+
+
+
+
+
+
+
+
+# ==================================================================
+# ==================================================================
+# ================= Operator Form Template OIS =====================
+# ==================================================================
+# ==================================================================
+
+from django.shortcuts import render, get_object_or_404, redirect
+from django.forms import modelformset_factory
+from .models import Form, FormQuestion, FormAnswer
+from .forms import OISAnswerForm, LPAAnswerForm
+import datetime
+import json
+
+def form_questions_view(request, form_id):
+    # Get the form instance and its form type
+    form_instance = get_object_or_404(Form, id=form_id)
+    form_type = form_instance.form_type
+
+    # Determine the template to render based on the form type's template name
+    template_name = f'forms/{form_type.template_name}'
+
+    # Map form types to their respective form classes
+    answer_form_classes = {
+        'OIS': OISAnswerForm,
+        'LPA': LPAAnswerForm,
+        # Add more form types as needed
+    }
+
+    # Get the form class for the current form type
+    answer_form_class = answer_form_classes.get(form_type.name)
+    if not answer_form_class:
+        raise ValueError(f"No form class defined for form type: {form_type.name}")
+
+    # Sort questions by the "order" key in the question JSON field directly
+    questions = sorted(
+        form_instance.questions.all(),
+        key=lambda q: q.question.get("order", 0)  # Access the 'order' directly from the dictionary
+    )
+
+    # Prepare formset for submitting answers, initializing with the number of questions
+    AnswerFormSet = modelformset_factory(FormAnswer, form=answer_form_class, extra=len(questions))
+
+    # Prepare initial data for each question
+    initial_data = [{'question': question} for question in questions]
+
+    error_message = None  # Initialize error message variable
+
+    # Retrieve the operator number from cookies
+    operator_number = request.COOKIES.get('operator_number', '')
+
+    if request.method == 'POST':
+        operator_number = request.POST.get('operator_number')
+
+        if not operator_number:
+            error_message = "Operator number is required."
+            formset = AnswerFormSet(request.POST)
+        else:
+            # Set the operator number as a cookie to persist it
+            response = redirect('form_questions', form_id=form_instance.id)
+            response.set_cookie('operator_number', operator_number, expires=datetime.datetime.now() + datetime.timedelta(days=365))
+
+            # Initialize formset with the posted data
+            formset = AnswerFormSet(request.POST)
+            if formset.is_valid():
+                for i, form in enumerate(formset):
+                    answer_data = form.cleaned_data.get('answer')
+                    if answer_data:
+                        # Get the corresponding question
+                        question = questions[i]
+
+                        # Create a new answer object including the operator number
+                        FormAnswer.objects.create(
+                            question=question,
+                            answer=answer_data,
+                            operator_number=operator_number  # Store the operator number
+                        )
+                return response
+            else:
+                error_message = "There was an error with your submission. Please check your answers."
+    else:
+        # Generate a formset with initial data, setting up the answer options based on checkmark
+        formset = AnswerFormSet(queryset=FormAnswer.objects.none(), initial=initial_data)
+        for form, question in zip(formset.forms, questions):
+            form.__init__(question=question)  # Pass question to form for conditional field handling
+
+    # Zip the questions and formset forms for paired rendering
+    question_form_pairs = zip(questions, formset.forms)
+
+    # Render the template
+    return render(request, template_name, {
+        'form_instance': form_instance,
+        'question_form_pairs': question_form_pairs,
+        'formset': formset,
+        'error_message': error_message,
+        'operator_number': operator_number,  # Pass the operator number to the template
+    })
+
+
+
+
+
+from django.shortcuts import render, get_object_or_404
+from .models import Form
+from collections import defaultdict
+import pprint
+from datetime import timedelta
+
+def view_records(request, form_id):
+    # Fetch the form instance and its questions
+    form_instance = get_object_or_404(Form, id=form_id)
+    questions = form_instance.questions.all()
+
+    # Initialize a list for timestamps and the final data structure for table rows
+    submission_timestamps = []
+    submission_data = []
+
+    # Collect unique timestamps and organize answers by feature
+    answers_by_timestamp = defaultdict(lambda: defaultdict(lambda: None))
+    for question in questions:
+        for answer in question.answers.order_by("created_at"):
+            # Convert UTC datetime to EST by subtracting 5 hours
+            utc_timestamp = answer.created_at
+            est_timestamp = utc_timestamp - timedelta(hours=5)  # UTC to EST (UTC - 5)
+
+            # Format the EST timestamp to "YYYY-MM-DD HH:MM"
+            timestamp_str = est_timestamp.strftime("%Y-%m-%d %H:%M")
+
+            # Track unique submission timestamps in order of creation
+            if timestamp_str not in submission_timestamps:
+                submission_timestamps.append(timestamp_str)
+            
+            # Map answer by question and timestamp
+            answers_by_timestamp[question.id][timestamp_str] = {
+                "answer": answer.answer,
+                "created_at": est_timestamp,
+            }
+
+    # Reverse sort submission timestamps to display latest submissions first
+    submission_timestamps.sort(reverse=True)
+
+    # Limit to the 10 most recent timestamps
+    submission_timestamps = submission_timestamps[:48]
+
+    # Prepare each question record for display
+    for question in questions:
+        row_data = {
+            "feature": question.question.get("feature", "N/A"),
+            "characteristic": question.question.get("characteristic", "N/A"),
+            "answers": []
+        }
+
+        # Fill in answers for each submission timestamp, aligned with the correct column
+        for timestamp in submission_timestamps:
+            if timestamp in answers_by_timestamp[question.id]:
+                answer_data = answers_by_timestamp[question.id][timestamp]
+                row_data["answers"].append({
+                    "answer": answer_data["answer"],
+                    "created_at": answer_data["created_at"],
+                    "blank": False  # Not blank if there's an answer
+                })
+            else:
+                # Mark missing answers as blank
+                row_data["answers"].append({"blank": True})
+
+        submission_data.append(row_data)
+
+    return render(request, 'forms/view_records.html', {
+        "form_instance": form_instance,
+        "submission_timestamps": submission_timestamps,
+        "submission_data": submission_data,
+    })
+
+
+
+
+
+
+
+def form_by_metadata_view(request):
+    # Extract query parameters
+    form_type_id = request.GET.get('formtype')
+    operation = request.GET.get('operation')
+    part_number = request.GET.get('part_number')
+
+    # Validate that the necessary query parameters are provided
+    if not form_type_id or not operation or not part_number:
+        return render(request, 'forms/error.html', {
+            'message': 'Missing query parameters. Please provide formtype, operation, and part_number.'
+        })
+
+    # Search for the form matching the given criteria
+    try:
+        form_instance = Form.objects.get(
+            form_type_id=form_type_id,
+            metadata__operation=operation,
+            metadata__part_number=part_number
+        )
+    except Form.DoesNotExist:
+        return render(request, 'forms/error.html', {
+            'message': 'No form found matching the provided criteria.'
+        })
+
+    # Fetch the form type and determine the template to use
+    form_type = form_instance.form_type
+    template_name = f'forms/{form_type.template_name}'
+
+    # Map form types to their respective answer form classes
+    answer_form_classes = {
+        'OIS': OISAnswerForm,
+        'LPA': LPAAnswerForm,
+    }
+    answer_form_class = answer_form_classes.get(form_type.name)
+
+    if not answer_form_class:
+        raise ValueError(f"No form class defined for form type: {form_type.name}")
+
+    # Fetch and sort questions based on the "order" field in the question JSON
+    questions = sorted(
+        form_instance.questions.all(),
+        key=lambda q: q.question.get("order", 0)
+    )
+
+    # Prepare the formset for answers
+    AnswerFormSet = modelformset_factory(FormAnswer, form=answer_form_class, extra=len(questions))
+    initial_data = [{'question': question} for question in questions]
+
+    error_message = None
+    operator_number = request.COOKIES.get('operator_number', '')
+
+    if request.method == 'POST':
+        operator_number = request.POST.get('operator_number')
+        if not operator_number:
+            error_message = "Operator number is required."
+            formset = AnswerFormSet(request.POST)
+        else:
+            formset = AnswerFormSet(request.POST)
+            if formset.is_valid():
+                for i, form in enumerate(formset):
+                    answer_data = form.cleaned_data.get('answer')
+                    if answer_data:
+                        FormAnswer.objects.create(
+                            question=questions[i],
+                            answer=answer_data,
+                            operator_number=operator_number
+                        )
+                # Redirect to the same view to clear the form
+                return redirect(request.path + f"?formtype={form_type_id}&operation={operation}&part_number={part_number}")
+            else:
+                error_message = "There was an error with your submission."
+
+
+    else:
+        formset = AnswerFormSet(queryset=FormAnswer.objects.none(), initial=initial_data)
+
+    # Zip questions and forms for paired rendering
+    question_form_pairs = zip(questions, formset.forms)
+
+    # Render the form view
+    return render(request, template_name, {
+        'form_instance': form_instance,
+        'question_form_pairs': question_form_pairs,
+        'formset': formset,
+        'error_message': error_message,
+        'operator_number': operator_number,
+    })
+
+
+
+from django.shortcuts import get_object_or_404, redirect
+from django.urls import reverse
+from .models import Form
+
+def smart_form_redirect_view(request, form_id):
+    form_instance = get_object_or_404(Form, id=form_id)
+    
+    form_type_id = form_instance.form_type_id
+    operation = form_instance.metadata.get('operation')
+    part_number = form_instance.metadata.get('part_number')
+    
+    # Only attempt metadata-based redirect if we have both operation & part_number
+    if operation and part_number:
+        # Check if a matching Form actually exists. If it does, we redirect to metadata‐based URL
+        try:
+            Form.objects.get(
+                form_type_id=form_type_id,
+                metadata__operation=operation,
+                metadata__part_number=part_number
+            )
+            # If we get here, a valid Form with that metadata exists
+            querystring = f"?formtype={form_type_id}&operation={operation}&part_number={part_number}"
+            return redirect(reverse('form_by_metadata') + querystring)
+        except Form.DoesNotExist:
+            pass
+    
+    # Fallback to the ID-based URL
+    return redirect('form_questions', form_id=form_id)
diff --git a/app/pms/settings.py b/app/pms/settings.py
index c083667..fbb9632 100755
--- a/app/pms/settings.py
+++ b/app/pms/settings.py
@@ -63,6 +63,7 @@ INSTALLED_APPS = [
     'query_tracking',
     'plant',
     'quality',
+    'forms',
 ]
 
 MIDDLEWARE = [
diff --git a/app/pms/urls.py b/app/pms/urls.py
index 842cf0d..40b0d8d 100755
--- a/app/pms/urls.py
+++ b/app/pms/urls.py
@@ -33,7 +33,7 @@ urlpatterns = [
     path('', pms_index_view, name='pms_index'),
     path('quality/', include('quality.urls')),
     path('plant/', include('plant.urls')),
-
+    path('forms/', include('forms.urls')),
 ]
 
 
