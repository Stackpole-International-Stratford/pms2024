diff --git a/app/prod_query/views.py b/app/prod_query/views.py
index 353c9b5d..4b327b8d 100755
--- a/app/prod_query/views.py
+++ b/app/prod_query/views.py
@@ -254,50 +254,69 @@ def prod_query_index_view(request):
 def strokes_per_min_graph(request):
     default_numGraphPoints = 300
     context = {}
+
     if request.method == 'GET':
         form = CycleQueryForm()
         context['form'] = form
         context['numGraphPoints'] = default_numGraphPoints
+
     elif request.method == 'POST':
         form = CycleQueryForm(request.POST)
         if form.is_valid():
-            machine = form.cleaned_data['machine']
-            start_date = form.cleaned_data['start_date']
-            start_time = form.cleaned_data['start_time']
-            end_date = form.cleaned_data['end_date']
-            end_time = form.cleaned_data['end_time']
+            machine     = form.cleaned_data['machine']
+            start_date  = form.cleaned_data['start_date']
+            start_time  = form.cleaned_data['start_time']
+            end_date    = form.cleaned_data['end_date']
+            end_time    = form.cleaned_data['end_time']
             numGraphPoints = int(request.POST.get('numGraphPoints', default_numGraphPoints))
 
-            # Ensure numGraphPoints is within the allowed range
-            if numGraphPoints < 50:
-                numGraphPoints = 50
-            elif numGraphPoints > 1000:
-                numGraphPoints = 1000
+            # clamp into [50,1000]
+            numGraphPoints = max(50, min(1000, numGraphPoints))
 
-            # Combine date and time into datetime objects
-            start_datetime = datetime.combine(start_date, start_time)
-            end_datetime = datetime.combine(end_date, end_time)
+            # build datetimes + timestamps
+            start_dt = datetime.combine(start_date, start_time)
+            end_dt   = datetime.combine(end_date,   end_time)
+            start_ts = int(time.mktime(start_dt.timetuple()))
+            end_ts   = int(time.mktime(end_dt.timetuple()))
 
-            # Convert datetimes to Unix timestamps
-            start_timestamp = int(time.mktime(start_datetime.timetuple()))
-            end_timestamp = int(time.mktime(end_datetime.timetuple()))
+            # compute your “ideal” interval in whole minutes
+            total_minutes = (end_dt - start_dt).total_seconds() / 60
+            interval      = max(int(total_minutes / numGraphPoints), 1)
 
-            # Calculate the total duration in minutes
-            total_minutes = (end_datetime - start_datetime).total_seconds() / 60
+            # if that interval is 1, override to 5 behind the scenes
+            effective_interval = 5 if interval == 1 else interval
 
-            # Calculate the interval to display numGraphPoints points
-            interval = max(int(total_minutes / numGraphPoints), 1)
+            # fetch with the effective interval
+            labels, counts = fetch_chart_data(
+                machine,
+                start_ts,
+                end_ts,
+                interval=effective_interval,
+                group_by_shift=False
+            )
 
-            labels, counts = fetch_chart_data(machine, start_timestamp, end_timestamp, interval=interval, group_by_shift=False)
+            # now: if we overrode (so interval==1), expand each 5m-bin
+            if interval == 1:
+                expanded_labels = []
+                expanded_counts = []
+                for dt, c in zip(labels, counts):
+                    # dt is the start of a 5-minute bin; replicate it 5 times
+                    for i in range(effective_interval):
+                        expanded_labels.append(dt + timedelta(minutes=i))
+                        expanded_counts.append(c)
+                labels, counts = expanded_labels, expanded_counts
+
+            # send to template
             context['chartdata'] = {
                 'labels': labels,
                 'dataset': {
-                    'label': 'Quantity',
+                    'label': 'Strokes per Minute',
                     'data': counts,
                     'borderWidth': 1
                 }
             }
-        context['form'] = form
+
+        context['form']           = form
         context['numGraphPoints'] = numGraphPoints
 
     return render(request, 'prod_query/strokes_per_minute.html', context)
